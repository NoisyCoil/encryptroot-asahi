.TH ENCRYPTROOT.ASAHI 8 "November 2023" "encryptroot.asahi" ENCRYPTROOT.ASAHI

.SH NAME
encryptroot.asahi - encrypt the root partition of your Fedora Asahi installation

.SH SYNOPSIS
\fBencryptroot.asahi\fP [ \fB--boot-label\fP \fIboot_label\fP ]
[ \fB-d\fP \fIdevice_name\fP ] [ \fB--root-label\fP \fIroot_label\fP ]
[ \fB-v\fP ] \fIrootdisk\fP \fIbootdisk\fP

\fBencryptroot.asahi\fP [ \fB-h\fP ]

.SH DESCRIPTION
\fBencryptroot.asahi\fP is an interactive script that allows you to encrypt the
root partition of your Fedora Asahi installation without deleting its contents. \
It is meant to be executed from an external USB drive hosting an Asahi OS, or
from a regular Linux virtual machine running on macOS. It may horribly screw up
your system if executed from your Fedora Asahi installation (this scenario is
completely untested, please, just don't).

Unless you've just installed Fedora Asahi, backup your system before running
\fBencryptroot.asahi\fP. As the user of this script, you are expected to be able
to manually recover from failure. If you are not able to do so, please don't run
\fBencryptroot.asahi\fP.

The \fBOPERATIONS\fP section of this manpage details the steps involved in the
encryption process. The \fBRECOVERY\fP section details its recovery logic. \
These sections can be of help if the process fails: they contain useful
information and debug steps.

By running this script you agree not to hold its author accountable for any
loss of data or any other form of damage resulting from its use.

.SH ARGUMENTS
.TP
\fIrootdisk\fP
The root disk (partition block device) to be encrypted.
.TP
\fIbootdisk\fP
The boot disk (partition block device) which will boot the encrypted root
partition.

.SH OPTIONS
.TP
\fB--boot-label\fP \fIboot_label\fP
The expected boot partition label. See also '\fBOPERATIONS - 0. Preliminary checks\fP'.
Default if not provided: \fBBOOT\fP.
.TP
\fB-d\fP \fIdevice_name\fP, \fB--device-name\fP \fIdevice_name\fP
The name of the mapped (decrypted) root device to be used on Fedora Asahi, as
in \fB/dev/mapper/device_name\fP. Stored in \fB/etc/crypttab\fP. Default if not
provided: \fBfedora-root\fP.
.TP
\fB-h\fP, \fB--help\fP
Print a synopsis and exit.
.TP
\fB--root-label\fP \fIroot_label\fP
The expected root partition label. See also '\fBOPERATIONS - 0. Preliminary checks\fP'.
Default if not provided: \fBfedora\fP.
.TP
\fB-v\fP, \fB--verbose\fP
Be more verbose.

.SH OPERATIONS
.TP
\fB0. Preliminary checks\fP
We check that the root partition is formatted with the \fBbtrfs\fP filesystem
and that the boot partition is formatted with the \fBext4\fP filesystem. \
Moreover, we check that the labels of the root and boot partions are,
respectively, \fBfedora\fP and \fBBOOT\fP, if not otherwise specified via the
\fB--root-label\fP and \fB--boot-label\fP options. Finally, we check that the
root and boot partitions contain the files and binaries required to complete
the encryption process.

These checks are performed in order to prevent encryptroot.asahi (or the user)
from unintentionally overwriting non-Fedora Asahi partitions (e.g. the macOS
partitions), and to make sure that the encryption process can be brought to
completion. Vanilla Fedora Asahi installations will pass these checks (if they
don't it's a bug, report it if you can!)

.TP
\fB1. Filesystem resizing\fP
The filesystem contained in your root partition needs to be shrunk to make
room for the (LUKS) headers generated during the encryption step. This is
achieved using the \fBbtrfs-filesystem\fP(8) command:

# \fBbtrfs filesystem resize -32M\fP \fImountpoint\fP

Whether this step was successful can be checked by mounting the root partition
and running

# \fBbtrfs device usage\fP \fImountpoint\fP

If the "\fBDevice slack\fP" field reads 32MiB (or 16MiB after encryption), it
was successful.

.TP
\fB2. Full-disk encryption\fP
The root partition is encrypted while preserving the data (that is, unless
things go wrong) using \fBcryptsetup-reencrypt\fP(8):

# \fBcryptsetup reencrypt --encrypt --reduce-device-size 32M\fP \fIrootdisk\fP

From the moment this step starts, the system will detect the root partition as
a \fBcrypto_LUKS\fP device (e.g. run \fBlsblk -ndo FSTYPE\fP \fIrootdisk\fP);
the root partition can then be mounted using \fBcryptsetup-open\fP(8). \
Nonetheless, the root partition is only actually fully encrypted when this step
is completed.

The encryption step can be interrupted and resumed at a later moment. While
this behavior is useful in the event of recovery from failure, we advise the
user not to intentionally stop the process while encryption is in progress.

You can check the encryption status of the root partition by running

# \fBcryptsetup luksDump\fP \fIrootdisk\fP

If the '\fBRequirements\fP' field in '\fBLUKS header information\fP' exists
and contains the string 'online-reencrypt', the encryption process was
interrupted and must be resumed. Otherwise it completed successfully. Note
that if the previous command complains about \fIrootdisk\fP being an invalid
LUKS device, it means that this step never started.

.TP
\fB3. /etc/crypttab and grub (chroot)\fP
The now-encrypted root partition is registered for boot-time decryption first
with the \fB/etc/crypttab\fP file (see also \fBcrypttab\fP(5)) and then with
\fBgrub\fP (see also \fBgrub2-mkconfig\fP(8)). This step is performed inside
a chroot.

This step was successfull if \fB/etc/crypttab\fP and \fB/etc/default/grub\fP
both contain the root disk's LUKS UUID, which can be obtained by

# \fBcryptsetup luksUUID\fP \fIrootdisk\fP

and if the same UUID is contained in the boot partition's files (usually
\fB/boot/grub2/grub.cfg\fP and the relevant files in
\fB/boot/loader/entries\fP).

.TP
\fB4. initramfs (chroot)\fP
The initramfs is regenerated to make sure that it can decrypt the root
partition at boot time. This step is also performed inside a chroot.

There is no obvious way to check that this step was successful, other than
unpacking the initramfs and looking for \fBcryptsetup\fP(8),
\fBsystemd-ask-password\fP(1), etc., inside it.

.SH RECOVERY
.TP
\fB1. Filesystem resizing\fP
\fBencryptroot.asahi\fP detects whether the root filesystem was already shrunk
by 32 MiB. If this is the case, re-running the script with the same arguments
won't resize it a second time. If you manually shrank the root filesystem by a
different amount (and the full-disk encryption step wasn't initiated yet),
re-running the script will shrink it again by 32 MiB. And then again. And so
on.

.TP
\fB2. Full-disk encryption\fP
\fBencryptroot.asahi\fP detects whether the encryption step was started
before. If it determines that a previous encryption step was interrupted while
in progress, it tries to resume it and bring it to completion. It does so by
running

# \fBcryptsetup reencrypt --encrypt --reduce-device-size 32M\fP \fIrootdisk\fP

again (see \fBcryptsetup-reencrypt\fP(8) for the relevant documentation). If
everything goes right, no data corruption will result from this re-running.

If \fBencryptroot.asahi\fP detects that \fIrootdisk\fP is fully encrypted, for
good measure, it asks whether you picked the wrong disk. If you tell it to
continue, it assumes that you're trying to resume the process from a later
step, and that the root disk you picked is the same you used in the previous
steps.

.TP
\fB3. /etc/crypttab and grub (chroot)\fP
\fBencryptroot.asahi\fP detects whether the encrypted root partition was
already registered in \fB/etc/crypttab\fP and \fB/etc/default/grub\fP, and
doesn't do so again if it was. \fBgrub2-mkconfig\fP, on the other hand, is
always run. This is a routine operation and should not cause any issue.

.TP
\fB4. initramfs (chroot)\fP
The initramfs is always regenerated. This is a routine operation and should not
cause any issue.

.TP
\fBNOTE\fP
Resuming the encryption process from the \fBFull-disk encryption\fP stage or
from later ones requires \fBencryptroot.asahi\fP to be executed with the
\fBsame arguments\fP as its first run. The checks in step 0 (see
\fBPreliminary checks\fP in the \fBOPERATIONS\fP sections) are still performed,
but on the decrypted device, which requires you to enter the root disk password
one additional time.

.SH CREDITS
The encryption procedure followed by this script is largely taken from David Alger,
<https://davidalger.com/posts/fedora-asahi-remix-on-apple-silicon-with-luks-encryption>
(October 2023 revision).

.SH REPORTING BUGS
Bug tracker: <https://gitlab.com/noisycoil/encryptroot-asahi>.

.SH COPYRIGHT
Copyright (c) 2023 NoisyCoil <noisycoil@tutanota.com>. License: MIT <https://mit-license.org>.

.SH SEE ALSO
.BR btrfs-filesystem (8),
.BR cryptsetup-reencrypt (8),
.BR crypttab (5),
.BR dracut (8),
.BR grub2-mkconfig (8).